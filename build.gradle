group 'com.github.smallcreep'
version(project.hasProperty('Ver') ? project.property('Ver') : '1.0-SNAPSHOT')

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.gradle:build-scan-plugin:1.8"
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.4'
    }
}

apply from: rootProject.file('gradle/basic.gradle')
apply plugin: 'maven'

// use fully qualified class name
apply plugin: 'com.bmuschko.docker-java-application'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer

task archiveHubData(type: Zip) {
    from 'hub'
    destinationDir = project.file('./data')
    baseName 'jb-hub-data'
    appendix 'int-test'
    version ''
    classifier ''
}

task unarchiveHubData(type: Copy) {
    from zipTree('./data/jb-hub-data-int-test.zip')
    into './hub'
}

task changeOwnerDockerfile (type: Dockerfile) {
    destFile = project.file('build/changeowner/Dockerfile')
    from 'alpine:3.6'
}

task changeOwnerBuildImage(type: DockerBuildImage) {
    dependsOn changeOwnerDockerfile
    inputDir = changeOwnerDockerfile.destFile.parentFile
    tag = 'changeowner:latest'
}

task createChangeOwnerContainer(type: DockerCreateContainer) {
    dependsOn changeOwnerBuildImage
    targetImageId { changeOwnerBuildImage.getImageId() }
    def projectPath = project.getProjectDir().toString()
    binds = new HashMap<String, String>()
    binds.put(projectPath + '/hub', '/hub')
    cmd = ['chown', '-R', '13001:13001', '/hub']
    containerName = 'change-owner'
}

task startChangeOwnerHubData(type: DockerStartContainer) {
    dependsOn createChangeOwnerContainer
    targetContainerId { createChangeOwnerContainer.getContainerId() }
}

task changeOwnerHubDataStop(type: DockerWaitContainer) {
    dependsOn startChangeOwnerHubData
    timeout 30
    targetContainerId { startChangeOwnerHubData.getContainerId() }
}

task changeOwnerHubData(type: DockerRemoveContainer) {
    dependsOn changeOwnerHubDataStop
    targetContainerId { changeOwnerHubDataStop.getContainerId() }
}

task hubDockerfile (type: Dockerfile) {
    destFile = project.file('build/hub/Dockerfile')
    from 'jetbrains/hub:2017.4.8440'
    instruction 'USER root'
    instruction 'RUN apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/'
    instruction 'USER jetbrains'
    instruction 'HEALTHCHECK --interval=5s --timeout=120s --retries=25 CMD curl --fail http://127.0.0.1:8080/hub/ || exit 1'
}

task hubBuildImage(type: DockerBuildImage) {
    dependsOn hubDockerfile
    inputDir = hubDockerfile.destFile.parentFile
    tag = 'hub:latest'
}

task createHubContainer(type: DockerCreateContainer) {
    dependsOn hubBuildImage
    targetImageId { hubBuildImage.getImageId() }
    portBindings = ['127.0.0.1:8080:8080']
    def projectPath = project.getProjectDir().toString()
    binds = new HashMap<String, String>()
    binds.put(projectPath + '/hub/data', '/opt/hub/data')
    binds.put(projectPath + '/hub/conf', '/opt/hub/conf')
    containerName = 'jb-hub-for-client'
}

task startHubRun(type: DockerStartContainer) {
    dependsOn createHubContainer
    targetContainerId { createHubContainer.getContainerId() }
}

task startHub(type: DockerWaitHealthyContainer) {
    dependsOn startHubRun
    targetContainerId { startHubRun.getContainerId() }
    timeout 120
    checkInterval 5
}

task sendStopHub(type: DockerExecContainer) {
    targetContainerId { 'jb-hub-for-client' }
    cmd = ["stop"]
}

task hubStopWait(type: DockerWaitContainer) {
    dependsOn sendStopHub
    timeout 60
    targetContainerId { sendStopHub.getContainerId() }
}

task deleteHub(type: DockerRemoveContainer) {
    dependsOn hubStopWait
    targetContainerId { hubStopWait.getContainerId() }
}

repositories {
    mavenCentral()
}

jar {
    def buildVersion = project.hasProperty('number') ? project.property('number') : '1.0-SNAPSHOT'
    manifest {
        attributes 'Hub-Version': version,
                'Hub-Build': buildVersion,
                'Hub-Date': new Date()
    }
}

project.ext {
    junitVersion = "4.12"
    lombokVersion = "1.16.18"
    jcabiAspectsVersion = "0.22.6"
    javaxJsonVersion = "1.1"
    jcabiManifestsVersion = "1.1"
    jcabiHttpVersion = "1.17.1"
    jsr311ApiVersion = "1.1.1"
    hamcrestVersion = "1.3"
    grizzlyServletWebserverVersion = "2.0.0-M3"
    jerseyClientVersion = "1.19.4"
    log4jVersion = "2.9.1"
    httpclientVersion = "4.5.3"
    equalsverifierVersion = "2.3.3"
    cactoosVersion = "0.21"
}

dependencies {
    compile "org.projectlombok:lombok:$lombokVersion"
    compile "com.jcabi:jcabi-aspects:$jcabiAspectsVersion"
    compile "javax.json:javax.json-api:$javaxJsonVersion"
    compile "com.jcabi:jcabi-manifests:$jcabiManifestsVersion"
    compile "com.jcabi:jcabi-http:$jcabiHttpVersion"
    compile "javax.ws.rs:jsr311-api:$jsr311ApiVersion"
    compile "org.hamcrest:hamcrest-core:$hamcrestVersion"
    compile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    compile "org.cactoos:cactoos:$cactoosVersion"

    runtime "com.sun.jersey:jersey-client:$jerseyClientVersion"
    runtime "org.glassfish:javax.json:$javaxJsonVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "nl.jqno.equalsverifier:equalsverifier:$equalsverifierVersion"

    testRuntime "com.sun.grizzly:grizzly-servlet-webserver:$grizzlyServletWebserverVersion"
    testRuntime "org.apache.httpcomponents:httpclient:$httpclientVersion"

    testRuntimeClasspath "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    testRuntimeClasspath "org.apache.logging.log4j:log4j-core:$log4jVersion"
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.project {
                packaging 'jar'
                name 'JB HUB Client'
                description 'Fluent Api client for JetBrains HUB'
                url 'https://github.com/smallcreep/jb-hub-client'
                inceptionYear '2017'
                licenses {
                    license {
                        name 'MIT'
                        url 'https://raw.githubusercontent.com/smallcreep/jb-hub-client/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id '1'
                        name 'Ilia Rogozhin'
                        email 'ilia.rogozhin@gmail.com'
                        roles {
                            role 'Architect'
                            role 'Developer'
                        }
                        timezone '+3'
                    }
                }
                issueManagement {
                    system 'GitHub'
                    url 'https://github.com/smallcreep/jb-hub-client/issues'
                }
                scm {
                    connection 'scm:git:git@github.com:smallcreep/jb-hub-client.git'
                    developerConnection 'scm:git:git@github.com:smallcreep/jb-hub-client.git'
                    url 'https://github.com/smallcreep/jb-hub-client'
                }
            }
        }
    }
}